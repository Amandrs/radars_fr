name: Build assets for a Release

on:
  push:
    tags:
      - "v*.*.*"
  # release:
  #   types: [published]

jobs:
  build-release:
    # https://docs.github.com/en/actions/using-jobs/assigning-permissions-to-jobs
    permissions: write-all
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        build_name:
          [linux-x64-musl, linux-arm64-musl, macos-arm64, macos-x64, windows-x64-msvc]
        include:
          - build_name: linux-x64-musl
            os: ubuntu-latest
            exe_suffix: ""
            name_suffix: ""
            target: x86_64-unknown-linux-musl
          - build_name: linux-arm64-musl
            os: ubuntu-latest
            exe_suffix: ""
            name_suffix: ""
            target: aarch64-unknown-linux-musl
          - build_name: macos-arm64
            os: macos-latest
            exe_suffix: ""
            name_suffix: ".arm"
            target: aarch64-apple-darwin
          - build_name: macos-x64
            os: macos-latest
            exe_suffix: ""
            name_suffix: ""
            target: x86_64-apple-darwin
          - build_name: windows-x64-msvc
            os: windows-latest
            exe_suffix: ".exe"
            name_suffix: ".exe"
            target: x86_64-pc-windows-msvc
    steps:
      - uses: actions/checkout@v4
      - uses: dtolnay/rust-toolchain@nightly
      - name: Rustup target
        run: rustup target add ${{ matrix.target }}
      - name: Install musl-tools on Linux
        run: sudo apt-get update --yes && sudo apt-get install --yes make libssl-dev musl-tools
        if: contains(matrix.build_name, 'musl')
      - name: Cache dependencies
        uses: Swatinem/rust-cache@v2
      - name: Build
        shell: bash
        run: |
          _cargo="cargo"
          if [ "${{ matrix.build_name }}" = "linux-arm64-musl" ]; then
            cargo install cross
            _cargo="cross"
          fi
          $_cargo build --release --locked --verbose --target ${{ matrix.target }}
      - name: MacOS Binary with ${{ matrix.build_name }} name
        run:  cp /Users/runner/work/radars_fr/radars_fr/target/${{matrix.target}}/release/radars radars-${{ matrix.build_name }}${{ matrix.name_suffix }}
        if: contains(matrix.build_name, 'macos')
      - name: Linux Binary with ${{ matrix.build_name }} name
        run:  cp /home/runner/work/radars_fr/radars_fr/target/${{matrix.target}}/release/radars radars-${{ matrix.build_name }}${{ matrix.name_suffix }}
        if: contains(matrix.build_name, 'linux')
      - name: Windows Binary with ${{ matrix.build_name }} name
        run:  copy D:\a\radars_fr\radars_fr\target\${{matrix.target}}\release\radars${{ matrix.name_suffix }} radars-${{ matrix.build_name }}${{ matrix.name_suffix }}
        if: contains(matrix.build_name, 'windows')  
      - name: Upload Assets
        uses: softprops/action-gh-release@v2
        with:
          files: radars-${{ matrix.build_name }}${{ matrix.name_suffix }}

      # - name: Upload asset
      #   uses: actions/upload-release-asset@v1.0.2
      #   env:
      #     GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      #   with:
      #     asset_path: target/${{ matrix.target }}/release/radars${{ matrix.exe_suffix }}
      #     asset_name: radars-${{ matrix.build_name}}${{ matrix.name_suffix }}
      #     asset_content_type: application/octet-stream
      #     upload_url: ${{ github.event.release.upload_url }}
  # build-completions:
  #   runs-on: ubuntu-latest
  #   steps:
  #     - uses: actions/checkout@v4
  #     - uses: dtolnay/rust-toolchain@nightly
  #     - name: Cache dependencies
  #       uses: Swatinem/rust-cache@v2
  #     - name: Generate Completions
  #       run: |
  #         cargo build

  #         SHELLS="bash elvish fish powershell zsh"

  #         mkdir completions
  #         for shell in $SHELLS; do
  #           cargo run -- gen-completions --shell $shell --to completions
  #         done

  #         zip -r completions.zip completions
  #     - name: Upload Assets
  #       uses: softprops/action-gh-release@v1
  #       with:
  #         files: completions.zip
  # cargo-publish:
  #   runs-on: ubuntu-latest
  #   steps:
  #     - uses: actions/checkout@v4
  #     - run: cargo login ${CRATES_IO_TOKEN}
  #       env:
  #         CRATES_IO_TOKEN: ${{ secrets.CRATES_IO_TOKEN }}
  #     - run: cargo publish
